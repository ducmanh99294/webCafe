package com.example.webcafe.service;

import com.example.webcafe.model.Order;
import com.example.webcafe.model.RevenueReport;
import com.example.webcafe.repository.OrderRepository;
import com.example.webcafe.repository.ReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.*;

@Service
public class ReportService {

    @Autowired
    private OrderRepository orderRepository;
    @Autowired
    private ReportRepository reportRepository;

    // lay tat ca
    public List<RevenueReport> getAllRevenues() {
        return reportRepository.findAll();
    }

    // H√†m t·∫°o doanh thu ƒë·ªÉ test (ch·∫°y th·ªß c√¥ng)
    public RevenueReport generateDailyRevenue(LocalDate date) {
        // L·∫•y t·∫•t c·∫£ order ho√†n th√†nh trong ng√†y
        List<Order> completedOrders = orderRepository
                .findByStatusAndCreatedAtBetween(
                        Order.Status.completed,
                        date.atStartOfDay(),
                        date.plusDays(1).atStartOfDay()
                );

        Map<String, Double> revenueByProduct = new HashMap<>();
        double total = 0;

        for (Order order : completedOrders) {
            for (Order.Item item : order.getItems()) {
                double revenue = item.getPrice() * item.getQuantity();
                total += revenue;
                revenueByProduct.merge(item.getName(), revenue, Double::sum);
            }
        }

        RevenueReport revenue = new RevenueReport(date, total, revenueByProduct);
        return reportRepository.save(revenue);
    }

    // üëâ So s√°nh doanh thu h√¥m nay v·ªõi h√¥m qua
    public Map<String, Object> compareRevenue(LocalDate date) {
        RevenueReport today = reportRepository.findByDate(date);
        RevenueReport yesterday = reportRepository.findByDate(date.minusDays(1));

        double todayRev = today != null ? today.getTotalRevenue() : 0;
        double yesterdayRev = yesterday != null ? yesterday.getTotalRevenue() : 0;

        double diff = todayRev - yesterdayRev;
        double percent = (yesterdayRev > 0) ? (diff / yesterdayRev) * 100 : 100;

        Map<String, Object> result = new HashMap<>();
        result.put("today", todayRev);
        result.put("yesterday", yesterdayRev);
        result.put("difference", diff);
        result.put("percentChange", percent);

        return result;
    }

    // doanh thu theo ngay`
    public RevenueReport getRevenueByDate(LocalDate date) {
        return reportRepository.findByDate(date);
    }

    // doanh thu theo thang
    public List<RevenueReport> getRevenuesByMonth(int year, int month) {
        LocalDate startDate = LocalDate.of(year, month, 1);
        LocalDate endDate = startDate.withDayOfMonth(startDate.lengthOfMonth());
        return reportRepository.findByDateBetween(startDate, endDate);
    }

    @Scheduled(cron = "0 0 0 * * *")
    public void AutogenerateDailyReport() {
        System.out.println("dang tao bao cao");
        generateDailyRevenue(LocalDate.now());
    }
}
