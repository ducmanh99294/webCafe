// Cart.js
import { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import '../../assets/css/user/cart.css';

const Cart = () => {
  const navigate = useNavigate();
  const [hasArrived, setHasArrived] = useState<any>(null);
  const [cart, setCart] = useState<any[]>([]);
  const [tables, setTables] = useState<any[]>([]);
  const [roomElements, setRoomElements] = useState<any[]>([]);

  const [selectedTable, setSelectedTable] = useState<any>(null);
  const [selectedPayment, setSelectedPayment] = useState<string>('');
  const [specialRequests, setSpecialRequests] = useState('');

  const api = 'http://localhost:8080'
  const userId = localStorage.getItem("userId");
  const token = localStorage.getItem("token");

  useEffect(() => {
        const initialRoomElements = [
      { id: 'reception1', type: 'reception', x: 50, y: 30, width: 200, height: 60, label: 'QU·∫¶Y L·ªÑ T√ÇN' },
      { id: 'window1', type: 'window', x: 0, y: 110, width: 15, height: 200 },
      { id: 'window2', type: 'window', x: 400, y: 480, width: 180, height: 15 },
      { id: 'window3', type: 'window', x: 100, y: 480, width: 180, height: 15 },
      { id: 'window4', type: 'window', x: 760, y: 110, width: 15, height: 200 },
      { id: 'mainWalkway1', type: 'walkway', x: 340, y: 60, width: 20, height: 430 },
      { id: 'mainWalkway2', type: 'walkway', x: 690, y: 360, width: 20, height: 130 },
      { id: 'sideWalkway1', type: 'walkway', x: 0, y: 350, width: 780, height: 20 },
      { id: 'sideWalkway2', type: 'walkway', x: 250, y: 50, width: 530, height: 20 },
      { id: 'entrance1', type: 'entrance', x: 650, y: 460, width: 100, height: 30, label: 'L·ªëi v√†o' },
    ];

    setRoomElements(initialRoomElements);
    fetchTable();

    fetchCart();
  }, []);

  const paymentMethods = [
    {
      id: 'cash',
      name: 'Ti·ªÅn m·∫∑t',
      description: 'Vui l√≤ng thanh to√°n t·∫°i qu·∫ßy',
      icon: 'üíµ'
    },
    {
      id: 'card',
      name: 'chuy·ªÉn kho·∫£n',
      description: 'Vui l√≤ng qu√©t m√£ b√™n d∆∞·ªõi',
      icon: 'üí≥'
    },
  ];

  const fetchCart = async () => {
    try {
      const res = await fetch(`${api}/api/carts/${userId}`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });
      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y gi·ªè h√†ng");
      const data = await res.json();
      setCart(data.items || []);
    } catch (err) {
      console.error("L·ªói l·∫•y gi·ªè h√†ng:", err);
    }
  };

  const fetchTable = async () => {
    try {
      const res = await fetch(`${api}/api/tables`);
      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y ds b√†n");
      const data = await res.json();
      setTables(data || []);
    } catch (err) {
      console.error("L·ªói:", err);
    }
  }

  const updateQuantity = async (productId: any, newQuantity: any) => {
    try {
      const res = await fetch(`${api}/api/carts/${userId}/update`, {
        method: "PUT",
        headers: { 
          "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
              },
        body: JSON.stringify({ productId, quantity: newQuantity }),
      });
      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng");
      const data = await res.json();
      setCart(data.items);
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
    }
  };

  const removeFromCart = async (productId: any) => {
    try {
      const res = await fetch(`${api}/api/carts/${userId}/remove`, {
        method: "DELETE",
        headers: { 
          "Content-Type": "application/json", 
          "Authorization": `Bearer ${token}`
        },
        body: JSON.stringify({ userId, productId }),
      });
      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m");
      const data = await res.json();
      setCart(data.items);
    } catch (err) {
      console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", err);
    }
  };

  const getSubtotal = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getServiceFee = () => {
    return hasArrived ? 0 : 15000;
  };

  const getTotal = () => {
    return getSubtotal() + getServiceFee();
  };

  const formatPrice = (price: any) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const handleCheckout = async () => {
  console.log({            
            userId,
            items: cart,
            total: getTotal(),
            paymentMethod: selectedPayment,
            tableId: selectedTable,
          },null,2)
      if (!selectedPayment) {
        alert("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n");
        return;
      }

      if (!hasArrived && !selectedTable) {
        alert("Vui l√≤ng ch·ªçn b√†n");
        return;
      }
      try {
        const res = await fetch(`${api}/api/orders/${userId}/confirm`, {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify({
            userId,
            items: cart,
            total: getTotal(),
            paymentMethod: selectedPayment,
            tableId: selectedTable.id,
          }),
        });
 
        if (!res.ok) throw new Error("Thanh to√°n th·∫•t b·∫°i");

        alert("ƒê·∫∑t h√†ng th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ l·ª±a ch·ªçn Caf√© M·ªôc.");
        navigate("/");
      } catch (err) {
        console.error("L·ªói khi ƒë·∫∑t h√†ng:", err);
      }
    };

  if (cart.length === 0) {
    return (
      <div className="cart-container">
        <div className="cart-header">
          <h1 className="cart-title">Gi·ªè H√†ng</h1>
          <p className="cart-subtitle">Qu·∫£n l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n t·∫°i Caf√© M·ªôc</p>
        </div>
        
        <div className="empty-cart">
          <div className="empty-icon">üõí</div>
          <h3 className="empty-title">Gi·ªè h√†ng tr·ªëng</h3>
          <p className="empty-description">
            H√£y th√™m m·ªôt v√†i m√≥n ngon t·ª´ th·ª±c ƒë∆°n c·ªßa ch√∫ng t√¥i
          </p>
          <Link to="/menu" className="continue-shopping">
            Ti·∫øp T·ª•c Mua S·∫Øm
          </Link>
        </div>
      </div>
    );
  }

  // console.log(tables);  
  return (
    <div className="cart-container">
      <div className="cart-header">
        <h1 className="cart-title">Gi·ªè H√†ng</h1>
        <p className="cart-subtitle">Qu·∫£n l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n t·∫°i Caf√© M·ªôc</p>
      </div>

      {/* Check-in Section */}
      {hasArrived === null && (
        <div className="checkin-section">
          <h2 className="checkin-title">B·∫°n ƒë√£ ƒë·∫øn qu√°n ch∆∞a?</h2>
          <p className="checkin-description">
            Vui l√≤ng cho ch√∫ng t√¥i bi·∫øt t√¨nh tr·∫°ng c·ªßa b·∫°n ƒë·ªÉ c√≥ tr·∫£i nghi·ªám ƒë·∫∑t h√†ng t·ªët nh·∫•t
          </p>
          <div className="checkin-options">
            <div
              className="checkin-option"
              onClick={() => setHasArrived(false)}
            >
              <div className="option-icon">üö∂‚Äç‚ôÇÔ∏è</div>
              <div className="option-title">Ch∆∞a ƒë·∫øn qu√°n</div>
              <div className="option-description">
                ƒê·∫∑t tr∆∞·ªõc v√† ch·ªçn b√†n, ch√∫ng t√¥i s·∫Ω chu·∫©n b·ªã s·∫µn khi b·∫°n ƒë·∫øn
              </div>
            </div>
            <div
              className="checkin-option"
              onClick={() => setHasArrived(true)}
            >
              <div className="option-icon">ü™ë</div>
              <div className="option-title">ƒê√£ ƒë·∫øn qu√°n</div>
              <div className="option-description">
                ƒêang ng·ªìi t·∫°i qu√°n, ch√∫ng t√¥i s·∫Ω ph·ª•c v·ª• ngay l·∫≠p t·ª©c
              </div>
            </div>
          </div>
        </div>
      )}

      {hasArrived !== null && (
        <div className="cart-layout">
          {/* Left Column - Cart Items & Options */}
          <div className="cart-main">
            {/* Cart Items */}
            <section className="cart-items-section">
              <h2 className="section-title">S·∫£n Ph·∫©m ƒê√£ Ch·ªçn</h2>
              <div className="cart-items">
                {cart.map((item: any) => (
                  <div key={item.id} className="cart-item">
                    <div
                      className="cart-item-image"
                      style={{ backgroundImage: `url(${item.image})` }}
                    />
                    <div className="cart-item-info">
                      <div className="cart-item-header">
                        <div>
                          <h3 className="cart-item-name">{item.name}</h3>
                          <span className="cart-item-category">{item.category}</span>
                        </div>
                        <button
                          className="cart-item-remove"
                          onClick={() => removeFromCart(item.productId)}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                      <div className="cart-item-details">
                        <div className="cart-item-price">
                          {formatPrice(item.price)}
                        </div>
                        <div className="cart-item-controls">
                          <div className="quantity-control">
                            <button
                              className="quantity-btn"
                              onClick={() => updateQuantity(item.productId, item.quantity - 1)}
                            >
                              -
                            </button>
                            <input
                              type="text"
                              className="quantity-input"
                              value={item.quantity}
                              readOnly
                            />
                            <button
                              className="quantity-btn"
                              onClick={() => updateQuantity(item.productId, item.quantity + 1)}
                            >
                              +
                            </button>
                          </div>
                          <div className="cart-item-total">
                            {formatPrice(item.price * item.quantity)}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </section>

            {/* Additional Options for Not Arrived */}
 
              <section className="additional-options">
                <div className="option-group">
                    <h3 className="option-group-title">
                      <span>ü™ë</span>
                      {selectedTable
                        ? `B√†n ƒëang ch·ªçn ${selectedTable.number}`
                        : hasArrived
                          ? "H√£y ch·ªçn b√†n ƒëang ng·ªìi"
                          : "Ch·ªçn B√†n"}
                    </h3>
                </div>
                <div className="seat-map-container">
                  <div 
                    className="seat-map"
                    onDragOver={(e) => e.preventDefault()}
                  >
                    {/* C√°c th√†nh ph·∫ßn ph√≤ng */}
                    {roomElements.map(element => (
                      <div
                        key={element.id}
                        className={`room-element ${element.type} ${element.shape || ''}`}
                        style={{
                          left: `${element.x}px`,
                          top: `${element.y}px`,
                          width: `${element.width}px`,
                          height: `${element.height}px`,
                        }}
                        title={element.label || element.type}
                      >
                        {element.label}
                      </div>
                    ))}

                    {/* C√°c ch·ªó ng·ªìi */}
                    <div className="tables-grid">
                    {tables.map(seat => (
                      <div
                        key={seat.id}
                        className={`seat-dot ${seat.status} ${selectedTable?.id === seat.id ? 'selected' : ''}`}
                        style={{ left: `${seat.x}px`, top: `${seat.y}px` }}
                        onClick={() => {
                          if (seat.status === 'available') {
                            setSelectedTable(seat);
                          } else {
                            alert('b√†n n√†y ƒë√£ c√≥ ng∆∞·ªùi ho·∫∑c ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc')
                          }
                        }}
                        title={`${seat.number} - ${seat.status === 'available' ? 'C√≤n tr·ªëng' : seat.status === 'unavailable' ? 'ƒê√£ c√≥ ng∆∞·ªùi' : 'ƒê√£ ƒë·∫∑t tr∆∞·ªõc'}`}
                      >
                        {seat.number}
                      </div>
                    ))}
                    </div>

                  </div>
                </div>
              </section>
            

            {/* Special Requests */}
            <section className="additional-options">
              <div className="option-group">
                <h3 className="option-group-title">
                  <span>üìù</span>
                  Y√™u C·∫ßu ƒê·∫∑c Bi·ªát
                </h3>
                <textarea
                  className="special-requests"
                  placeholder="Vui l√≤ng cho ch√∫ng t√¥i bi·∫øt n·∫øu b·∫°n c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát n√†o (√≠t ƒë∆∞·ªùng, kh√¥ng ƒë√°, v.v.)"
                  value={specialRequests}
                  onChange={(e) => setSpecialRequests(e.target.value)}
                />
              </div>
            </section>
          </div>

          {/* Right Column - Order Summary */}
          <aside className="order-summary">
            <h2 className="summary-title">T√≥m T·∫Øt ƒê∆°n H√†ng</h2>
            
            {/* Order Items */}
            <div className="summary-items">
              {cart.map((item: any) => (
                <div key={item.id} className="summary-item">
                  <span className="summary-item-name">{item.name}</span>
                  <span className="summary-item-quantity">x{item.quantity}</span>
                  <span className="summary-item-price">
                    {formatPrice(item.price * item.quantity)}
                  </span>
                </div>
              ))}
            </div>

            {/* Totals */}
            <div className="summary-totals">
              <div className="total-row">
                <span>T·∫°m t√≠nh:</span>
                <span>{formatPrice(getSubtotal())}</span>
              </div>
              {!hasArrived && (
                <div className="total-row">
                  <span>Ph√≠ ph·ª•c v·ª•:</span>
                  <span>{formatPrice(getServiceFee())}</span>
                </div>
              )}
              <div className="total-row final">
                <span>T·ªïng c·ªông:</span>
                <span>{formatPrice(getTotal())}</span>
              </div>
            </div>

            {/* Payment Methods */}
            <div className="payment-methods">
              <h3 className="option-group-title" style={{marginBottom: '15px'}}>
                <span>üí≥</span>
                Ph∆∞∆°ng Th·ª©c Thanh To√°n
              </h3>
              <div className="payment-options">
                {paymentMethods.map(payment => (
                  <div
                    key={payment.id}
                    className={`payment-option ${selectedPayment === payment.id ? 'selected' : ''}`}
                    onClick={() => setSelectedPayment(payment.id)}
                  >
                    <span className="payment-icon">{payment.icon}</span>
                    <div className="payment-info">
                      <div className="payment-name">{payment.name}</div>
                      <div className="payment-description">{payment.description}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Checkout Button */}
            <button
              className="checkout-btn"
              onClick={handleCheckout}
              disabled={!selectedPayment}
            >
              {hasArrived ? 'ƒê·∫∑t H√†ng Ngay' : 'X√°c Nh·∫≠n ƒê·∫∑t Tr∆∞·ªõc'}
            </button>

            {/* Change Arrival Status */}
            <button
              style={{
                width: '100%',
                background: 'transparent',
                border: '1px solid #4B3B2B',
                color: '#4B3B2B',
                padding: '12px',
                borderRadius: '8px',
                cursor: 'pointer',
                marginTop: '15px',
                fontSize: '0.9rem'
              }}
              onClick={() => setHasArrived(null)}
            >
              Thay ƒë·ªïi tr·∫°ng th√°i ƒë·∫øn qu√°n
            </button>
          </aside>
        </div>
      )}
    </div>
  );
};

export default Cart;